@Test.describe('Sample tests')
def _():
    @Test.it("Without Obstacles")
    def _():
        test.assert_equals(attack((7, 1), (5, 2), ()), 1)
        test.assert_equals(attack((7, 1), (3, 3), ()), 2)
        test.assert_equals(attack((7, 6), (0, 5), ()), 4)
        test.assert_equals(attack((7, 6), (2, 1), ()), 4)
        test.assert_equals(attack((7, 6), (7, 6), ()), 0)
        test.assert_equals(attack((7, 6), (7, 7), ()), 3)
        test.assert_equals(attack((7, 7), (1, 0), ()), 5)

    @Test.it("With Obstacles")
    def _():
        test.assert_equals(attack((7, 1), (3, 3), ((5, 1), (5, 2), (5, 0), (4, 2), (4, 4), (7, 5))), 4)
        test.assert_equals(attack((6, 7), (7, 7), ((5, 5), (5, 6), (5, 7), (8, 6), (6, 9), (9, 6), (7, 9), (4, 6))), 5)
        test.assert_equals(attack((7, 1), (3, 3), ((5, 2),)), 4)
        test.assert_equals(attack((7, 1), (3, 3), (
        (5, 1), (5, 2), (5, 0), (4, 2), (4, 4), (7, 5), (4, 3), (7, 4), (3, 4), (3, 6), (4, 7), (6, 7), (6, 4), (3, 6),
        (4, 5))), 4)
        test.assert_equals(attack((7, 6), (7, 7), ((5, 5), (5, 6), (5, 7))), 3)
        test.assert_equals(attack((7, 1), (3, 3), (
        (5, 1), (5, 2), (5, 0), (4, 2), (4, 4), (7, 5), (4, 3), (7, 4), (3, 4), (3, 6), (4, 7), (6, 7), (6, 4), (3, 6),
        (4, 5), (4, 6), (5, 3), (7, 3))), 4)
        test.assert_equals(attack((7, 1), (3, 3), (
        (5, 0), (6, 3), (5, 2), (4, 2), (4, 4), (7, 5), (4, 3), (1, 3), (3, 4), (0, 3), (4, 7), (0, 5), (6, 4), (1, 7),
        (4, 5), (4, 6), (5, 3), (7, 3))), 4)
        test.assert_equals(attack((0, 0), (7, 7), (
        (5, 5), (5, 6), (5, 7), (5, 8), (6, 5), (8, 6), (6, 9), (9, 6), (8, 5), (7, 9), (4, 6), (9, 8))), 8)

    ss = ('''\
*************************
*   *                   *
*   *                   *
* S *   *****************
*   *   *     * *       *
*********     * *       *
*       *     *E*       *
*       *     * *       *
*************************''',  # 8
          '''\
        ***************************************************************
        ******************************* *******************************
        **  S                                                        **
        **                                                     E     **
        ***************************************************************
        ***************************************************************''',  # 26
          '''\
        ***************************************************************
        ***************************************************************
        **  S                                                        **
        **                                                    E      **
        ***************************************************************
        ***************************************************************''',  # 25
          )

    @Test.it('Jump! Jump!')
    def _():
        for s, exp in zip(ss, (8, 26, 25)):
            test.assert_equals(attack(*data_builder(s)), exp)

    @Test.it('Should still work in worst case scenario')
    def _():
        s = '''\
***********************************************
***********************************************
**  **      **                               **
**  **      **                               **
**  **  **  **  ***************************  **
**  **  **  **  ***************************  **
**  **  **  **  ***      **      **      **  **
**      **      ***  **  **      **      **  **
**   S  **      ***  **  **  **  **  **  **  **
*******************  **  **  **  **  **  **  **
*******************  **  **  **  **  **  **  **
*******************  **  **  **  **  **  **  **
**               **  **  **  **  **  **  **  **
**           E   **  **  **  **  **  **  **  **
**               **  **  **  **  **  **  **  **
**************** **  **  **  **  **  **  **  **
**************** **  **  **  **  **  **  **  **
**               **  **  **  **  **  **  **  **
**               **  **  **  **  **  **  **  **
**               **  **  **  **  **  **  **  **
** ****************  **  **  **  **  **  **  **
** ****************  **  **  **  **  **  **  **
**                   **      **      **  **  **
**                   **      **      **  **  **
**                   **      **      **      **
***********************************************
***********************************************'''
        test.assert_equals(attack(*data_builder(s)), 105)

    @Test.it('Unreachability tests')
    def _():
        @Test.timeout(.2)
        def _():
            s = '''\
***************************************************************
***************************************************************
**  S                                                        **
**                                                     E     **
***************************************************************
***************************************************************'''
            ret = attack(*data_builder(s))
            Test.expect(ret is None, "Unreachable, the result should be None but was: " + str(ret))

            s, e, o = ((0, 0), (7, 7), ((5, 6), (5, 8), (6, 5), (6, 9), (9, 6), (8, 5), (8, 9), (9, 8)))
            display(s, e, o)

            @Test.timeout(.2)
            def _():
                ret = attack(s, e, o)
                Test.expect(ret is None, "Unreachable, the result should be None but was: " + str(ret))


